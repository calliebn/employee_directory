{"version":3,"sources":["utils/API.js","components/TableRow.js","components/SearchForm.js","components/Table.js","components/Header.js","App.js","reportWebVitals.js","index.js"],"names":["axios","get","TableRow","props","className","src","picture","thumbnail","alt","name","first","last","href","email","phone","dob","index","SearchForm","onSubmit","handleFormSubmit","onChange","handleInputChange","value","search","type","placeholder","id","Table","state","results","isAscending","getEmployees","API","then","res","setState","data","catch","err","console","log","searchPeople","event","preventDefault","filteredEmployees","filter","employee","toLowerCase","target","sortingData","sort","a","b","formatDate","date","Date","push","getMonth","slice","getDate","getFullYear","join","this","scope","onClick","map","Component","Header","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.561638be.chunk.js","sourcesContent":["import axios from \"axios\";\n\nconst URL = \"https://randomuser.me/api/?&results=20&nat=us\"\n\nexport default {\n    getEmployees: function () {\n        return axios.get(URL);\n    }\n};","const TableRow = (props) => {\n    return (\n        <tr className=\"text-center h5 text-light\" key={props.index}>\n            <td>\n                <img src={props.picture.thumbnail} alt={props.name.first + \" \" + props.name.last} />\n            </td>\n\n            <td className=\"align-middle\">{props.name.first} {props.name.last}</td>\n            <td className=\"align-middle\"><a href={`mailto${props.email}`}>{props.email}</a></td>\n            <td className=\"align-middle\">{props.phone}</td>\n            <td className=\"align-middle\">{props.dob}</td>\n        </tr>\n    )\n}\n\nexport default TableRow","import React from \"react\";\n\nfunction SearchForm(props) {\n    return (\n        <form onSubmit={props.handleFormSubmit}>\n            <div className=\"form-group\">\n                <input\n                    onChange={props.handleInputChange}\n                    value={props.search}\n                    type=\"text\"\n                    className=\"form-control\"\n                    placeholder=\"Search for an employee\"\n                    id=\"search\"\n                />\n            </div>\n        </form>\n    );\n}\n\nexport default SearchForm;","import React, { Component } from \"react\";\nimport API from \"../utils/API\";\nimport TableRow from \"./TableRow\"\nimport SearchForm from \"./SearchForm\";\nimport \"./styles.css\";\n\n\nclass Table extends Component {\n    state = {\n        search: \"\",\n        results: [],\n        isAscending: true,\n    }\n    //Loads random users from the API when the component mounts\n    componentDidMount() {\n        this.getEmployees();\n    }\n\n    // Generates a list of employees\n    getEmployees = () => {\n        API.getEmployees()\n            .then(res => {\n                this.setState({\n                    results: res.data.results,\n                })\n            })\n            .catch(err => console.log(err))\n    }\n\n    // Filters the data by name\n    searchPeople = event => {\n        event.preventDefault();\n        console.log(\"Filter user\", this.state.search);\n        if (this.state.search === \"\") {\n            //resetting the table\n            this.getEmployees();\n        } else {\n\n            //Filters out the specific user \n            const filteredEmployees = this.state.results.filter(employee => employee.name.first.toLowerCase() === this.state.search.toLowerCase() || employee.name.last.toLowerCase() === this.state.search.toLowerCase());\n            console.log(filteredEmployees)\n            this.setState({ results: filteredEmployees })\n\n        }\n\n    }\n\n    handleInputChange = event => {\n        event.preventDefault();\n        console.log(\"HIC\", event.target.value);\n        this.setState({\n            search: event.target.value\n        })\n\n    }\n\n    //Sorts the data in ascending or descending order by the employee's last name\n    sortingData = (event) => {\n        console.log(this.state.isAscending);\n        event.preventDefault();\n        this.setState({\n            results: this.state.results.sort((a, b) => {\n                if (this.state.isAscending === true) {\n                    //arange it ascending order by LAST NAMES only \n                    return (a.name.last < b.name.last) ? -1 : (a.name.last > b.name.last) ? 1 : 0\n                } else {\n                    //Descending order \n                    return (a.name.last < b.name.last) ? 1 : (a.name.last > b.name.last) ? -1 : 0\n                }\n            })\n        });\n        //TOGGLE THE FLAG \n        if (this.state.isAscending === true) {\n            //update the sate IS ASCENDING TO FLASE \n            this.setState({\n                isAscending: false\n            })\n        } else {\n            this.setState({\n                isAscending: true\n            })\n        }\n\n\n    }\n\n    // Formats the DOB\n    formatDate = (date) => {\n        date = new Date(date);\n        let dob = [];\n        dob.push((\"0\" + (date.getMonth() + 1)).slice(-2));\n        dob.push((\"0\" + date.getDate()).slice(-2));\n        dob.push(date.getFullYear());\n        return dob.join(\"-\");\n    }\n\n    // renders the table\n    render() {\n        return (\n            <wrapper>\n                <SearchForm handleInputChange={this.handleInputChange} search={this.state.search} handleFormSubmit={this.searchPeople} />\n\n                <table className=\"table table-light table-striped\">\n                    <thead>\n                        <tr>\n                            <th scope=\"col\"></th>\n                            <th scope=\"col\">Name <i className=\"fas fa-sort\" onClick={this.sortingData}></i></th>\n                            <th scope=\"col\">Email</th>\n                            <th scope=\"col\">Phone</th>\n                            <th scope=\"col\">DOB</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {\n                            this.state.results.map((employee, index) => (\n                                <TableRow\n                                    key={index}\n                                    picture={employee.picture}\n                                    name={employee.name}\n                                    email={employee.email}\n                                    phone={employee.phone}\n                                    dob={this.formatDate(employee.dob.date)}\n                                    index={index}\n                                />\n\n                            ))\n                        }\n\n                    </tbody>\n                </table>\n            </wrapper>\n        );\n    }\n};\n\nexport default Table;","import React from \"react\";\nimport \"./styles.css\"\n\nconst Header = () => {\n    return (\n        <header>\n            <h1 className=\"text-center\">Employee Directory</h1>\n            <p className=\"text-center\">Click on the arrow next to filter by the last name or use the search box to find a specific person</p>\n        </header>\n    );\n};\n\nexport default Header;","import './App.css';\nimport Table from \"./components/Table\";\nimport Header from \"./components/Header\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Table />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}